{
    "info": {
        "_postman_id": "notification-api-collection",
        "name": "🔔 Notification API",
        "description": "Comprehensive test suite for notification management, delivery tracking, and alert system endpoints.",
        "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
        {
            "name": "📬 Notification Management",
            "item": [
                {
                    "name": "✉️ Send Notification",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Generate test notification data",
                                    "const timestamp = new Date().toISOString();",
                                    "pm.environment.set('notificationTitle', `Test Notification ${timestamp}`);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200 or 201', function () {",
                                    "    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
                                    "});",
                                    "",
                                    "pm.test('Notification sent successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "});",
                                    "",
                                    "pm.test('Notification data returned', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('notification');",
                                    "    pm.expect(jsonData.data.notification).to.have.property('id');",
                                    "    pm.expect(jsonData.data.notification).to.have.property('title');",
                                    "    pm.expect(jsonData.data.notification).to.have.property('status');",
                                    "});",
                                    "",
                                    "// Save notification ID for subsequent tests",
                                    "if (pm.response.code === 200 || pm.response.code === 201) {",
                                    "    const responseData = pm.response.json();",
                                    "    if (responseData.success && responseData.data.notification) {",
                                    "        pm.environment.set('testNotificationId', responseData.data.notification.id);",
                                    "    }",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "{{contentType}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"{{notificationTitle}}\",\n    \"message\": \"This is a test notification sent via API.\",\n    \"type\": \"INFO\",\n    \"priority\": \"MEDIUM\",\n    \"recipientUsername\": \"{{testUsername}}\",\n    \"expirationTime\": \"2025-12-31T23:59:59Z\",\n    \"requiresAcknowledgment\": false\n}"
                        },
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications/send",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications",
                                "send"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "📋 Get User Notifications",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Notifications list returned', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.have.property('notifications');",
                                    "    pm.expect(jsonData.data.notifications).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test('Notification entries have required fields', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    if (jsonData.data.notifications.length > 0) {",
                                    "        const notification = jsonData.data.notifications[0];",
                                    "        pm.expect(notification).to.have.property('id');",
                                    "        pm.expect(notification).to.have.property('title');",
                                    "        pm.expect(notification).to.have.property('message');",
                                    "        pm.expect(notification).to.have.property('type');",
                                    "        pm.expect(notification).to.have.property('priority');",
                                    "        pm.expect(notification).to.have.property('createdAt');",
                                    "        pm.expect(notification).to.have.property('isRead');",
                                    "    }",
                                    "});",
                                    "",
                                    "pm.test('Pagination information included', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('pagination');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications?unreadOnly=false&page=0&size=20",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications"
                            ],
                            "query": [
                                {
                                    "key": "unreadOnly",
                                    "value": "false"
                                },
                                {
                                    "key": "page",
                                    "value": "0"
                                },
                                {
                                    "key": "size",
                                    "value": "20"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "👁️ Get Unread Notifications",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Only unread notifications returned', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    if (jsonData.data.notifications.length > 0) {",
                                    "        jsonData.data.notifications.forEach(notification => {",
                                    "            pm.expect(notification.isRead).to.eql(false);",
                                    "        });",
                                    "    }",
                                    "});",
                                    "",
                                    "pm.test('Unread count header present', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('unreadCount');",
                                    "    pm.expect(jsonData.data.unreadCount).to.be.a('number');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications?unreadOnly=true",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications"
                            ],
                            "query": [
                                {
                                    "key": "unreadOnly",
                                    "value": "true"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "✅ Mark Notification as Read",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Check if we have a notification ID",
                                    "if (!pm.environment.get('testNotificationId')) {",
                                    "    console.log('Warning: No notification ID available. Using placeholder.');",
                                    "    pm.environment.set('testNotificationId', 'placeholder-id');",
                                    "}"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Notification marked as read', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "});",
                                    "",
                                    "pm.test('Updated notification data returned', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('notification');",
                                    "    pm.expect(jsonData.data.notification.isRead).to.eql(true);",
                                    "    pm.expect(jsonData.data.notification).to.have.property('readAt');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications/{{testNotificationId}}/read",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications",
                                "{{testNotificationId}}",
                                "read"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "🗑️ Delete Notification",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Notification deleted successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "});",
                                    "",
                                    "pm.test('Deletion confirmation message', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.message).to.include('deleted');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "DELETE",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications/{{testNotificationId}}",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications",
                                "{{testNotificationId}}"
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "description": "Basic notification CRUD operations and user notification management."
        },
        {
            "name": "🔧 Notification Administration",
            "item": [
                {
                    "name": "📢 Broadcast Notification",
                    "event": [
                        {
                            "listen": "prerequest",
                            "script": {
                                "exec": [
                                    "// Generate broadcast notification data",
                                    "const timestamp = new Date().toISOString();",
                                    "pm.environment.set('broadcastTitle', `System Broadcast ${timestamp}`);"
                                ],
                                "type": "text/javascript"
                            }
                        },
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Broadcast notification sent', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "});",
                                    "",
                                    "pm.test('Broadcast statistics returned', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('broadcast');",
                                    "    pm.expect(jsonData.data.broadcast).to.have.property('id');",
                                    "    pm.expect(jsonData.data.broadcast).to.have.property('recipientCount');",
                                    "    pm.expect(jsonData.data.broadcast.recipientCount).to.be.a('number');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "{{contentType}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"title\": \"{{broadcastTitle}}\",\n    \"message\": \"This is a system-wide broadcast message for all users.\",\n    \"type\": \"SYSTEM\",\n    \"priority\": \"HIGH\",\n    \"targetRoles\": [\"USER\", \"ADMIN\"],\n    \"expirationTime\": \"2025-12-31T23:59:59Z\",\n    \"requiresAcknowledgment\": true\n}"
                        },
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications/broadcast",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications",
                                "broadcast"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "📊 Get Notification Statistics",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Notification statistics returned', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.have.property('statistics');",
                                    "});",
                                    "",
                                    "pm.test('Statistics include key metrics', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    const stats = jsonData.data.statistics;",
                                    "    pm.expect(stats).to.have.property('totalNotifications');",
                                    "    pm.expect(stats).to.have.property('unreadNotifications');",
                                    "    pm.expect(stats).to.have.property('notificationsByType');",
                                    "    pm.expect(stats).to.have.property('notificationsByPriority');",
                                    "    pm.expect(stats).to.have.property('deliveryStats');",
                                    "});",
                                    "",
                                    "pm.test('Numeric values are valid', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    const stats = jsonData.data.statistics;",
                                    "    pm.expect(stats.totalNotifications).to.be.a('number');",
                                    "    pm.expect(stats.unreadNotifications).to.be.a('number');",
                                    "    pm.expect(stats.totalNotifications).to.be.at.least(0);",
                                    "    pm.expect(stats.unreadNotifications).to.be.at.least(0);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications/stats",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications",
                                "stats"
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "🧹 Cleanup Expired Notifications",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Cleanup operation successful', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "});",
                                    "",
                                    "pm.test('Cleanup results provided', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('cleanup');",
                                    "    pm.expect(jsonData.data.cleanup).to.have.property('deletedCount');",
                                    "    pm.expect(jsonData.data.cleanup.deletedCount).to.be.a('number');",
                                    "    pm.expect(jsonData.data.cleanup.deletedCount).to.be.at.least(0);",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "POST",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications/cleanup",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications",
                                "cleanup"
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "description": "Administrative notification operations for system management and maintenance."
        },
        {
            "name": "🚨 Alert Management",
            "item": [
                {
                    "name": "⚠️ Get System Alerts",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Alerts list returned', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "    pm.expect(jsonData.data).to.have.property('alerts');",
                                    "    pm.expect(jsonData.data.alerts).to.be.an('array');",
                                    "});",
                                    "",
                                    "pm.test('Alert entries have required fields', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    if (jsonData.data.alerts.length > 0) {",
                                    "        const alert = jsonData.data.alerts[0];",
                                    "        pm.expect(alert).to.have.property('id');",
                                    "        pm.expect(alert).to.have.property('title');",
                                    "        pm.expect(alert).to.have.property('severity');",
                                    "        pm.expect(alert).to.have.property('status');",
                                    "        pm.expect(alert).to.have.property('createdAt');",
                                    "    }",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "GET",
                        "header": [
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications/alerts?severity=HIGH&status=ACTIVE",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications",
                                "alerts"
                            ],
                            "query": [
                                {
                                    "key": "severity",
                                    "value": "HIGH"
                                },
                                {
                                    "key": "status",
                                    "value": "ACTIVE"
                                }
                            ]
                        }
                    },
                    "response": []
                },
                {
                    "name": "🔕 Acknowledge Alert",
                    "event": [
                        {
                            "listen": "test",
                            "script": {
                                "exec": [
                                    "pm.test('Status code is 200', function () {",
                                    "    pm.response.to.have.status(200);",
                                    "});",
                                    "",
                                    "pm.test('Alert acknowledged successfully', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.success).to.eql(true);",
                                    "});",
                                    "",
                                    "pm.test('Acknowledgment data returned', function () {",
                                    "    const jsonData = pm.response.json();",
                                    "    pm.expect(jsonData.data).to.have.property('alert');",
                                    "    pm.expect(jsonData.data.alert).to.have.property('acknowledgedBy');",
                                    "    pm.expect(jsonData.data.alert).to.have.property('acknowledgedAt');",
                                    "});"
                                ],
                                "type": "text/javascript"
                            }
                        }
                    ],
                    "request": {
                        "method": "PUT",
                        "header": [
                            {
                                "key": "Content-Type",
                                "value": "{{contentType}}"
                            },
                            {
                                "key": "Authorization",
                                "value": "Bearer {{authToken}}"
                            }
                        ],
                        "body": {
                            "mode": "raw",
                            "raw": "{\n    \"acknowledgmentNote\": \"Alert reviewed and acknowledged by admin via API.\"\n}"
                        },
                        "url": {
                            "raw": "{{fullApiUrl}}/notifications/alerts/{{alertId}}/acknowledge",
                            "host": [
                                "{{fullApiUrl}}"
                            ],
                            "path": [
                                "notifications",
                                "alerts",
                                "{{alertId}}",
                                "acknowledge"
                            ]
                        }
                    },
                    "response": []
                }
            ],
            "description": "System alert monitoring and acknowledgment operations."
        }
    ],
    "auth": {
        "type": "bearer",
        "bearer": [
            {
                "key": "token",
                "value": "{{authToken}}",
                "type": "string"
            }
        ]
    },
    "event": [
        {
            "listen": "prerequest",
            "script": {
                "id": "notification-prerequest",
                "type": "text/javascript",
                "exec": [
                    "console.log('🔔 Notification API Request: ' + pm.info.requestName);"
                ]
            }
        }
    ]
}
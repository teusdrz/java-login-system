import React, { useRef, useEffect, useState } from 'react';
import './VideoIntro.css';

interface VideoIntroProps {
    onComplete: () => void;
}

const VideoIntro: React.FC<VideoIntroProps> = ({ onComplete }) => {
    const videoRef = useRef<HTMLVideoElement>(null);
    const containerRef = useRef<HTMLDivElement>(null);
    const [isTransitioning, setIsTransitioning] = useState(false);
    const [showTransitionOverlay, setShowTransitionOverlay] = useState(false);
    const [audioEnabled, setAudioEnabled] = useState(false);
    const [videoLoaded, setVideoLoaded] = useState(false);
    const [playAttempted, setPlayAttempted] = useState(false);

    useEffect(() => {
        const video = videoRef.current;
        const container = containerRef.current;
        if (!video || !container) return;

        console.log('üé¨ Inicializando VideoIntro...');

        // ESTRAT√âGIA AGRESSIVA: For√ßa √°udio ativo IMEDIATAMENTE
        const initializeVideoWithSound = () => {
            // Configura√ß√µes IMPERATIVAS para √°udio ativo
            video.muted = false;
            video.volume = 1.0;
            video.defaultMuted = false;

            // Remove qualquer atributo muted do HTML
            video.removeAttribute('muted');

            console.log('üîä FOR√áANDO √°udio ativo desde o IN√çCIO!');
            setAudioEnabled(true);
        };

        // FOR√áA √°udio antes de qualquer tentativa de reprodu√ß√£o
        initializeVideoWithSound();

        // Estrat√©gia SEGURA e CONTROLADA para √°udio ativo
        const playVideo = async () => {
            // Evita m√∫ltiplas tentativas simult√¢neas
            if (playAttempted) {
                console.log('‚ö†Ô∏è Reprodu√ß√£o j√° tentada, aguardando...');
                return;
            }

            setPlayAttempted(true);

            try {
                console.log('üöÄ Iniciando reprodu√ß√£o controlada com som ATIVO...');

                // Pausa qualquer reprodu√ß√£o anterior para evitar conflitos
                video.pause();
                video.currentTime = 0;

                // CONFIGURA√á√ïES ULTRA IMPERATIVAS
                video.muted = false;
                video.volume = 1.0;
                video.controls = false;
                video.defaultMuted = false;

                // Aguarda um frame antes de tentar reproduzir
                await new Promise(resolve => requestAnimationFrame(resolve));

                // PRIMEIRA tentativa: Som ativo direto
                await video.play();
                console.log('‚úÖ PERFEITO! V√≠deo COM SOM reproduzindo desde o in√≠cio!');
                setAudioEnabled(true);

            } catch (error) {
                console.log('‚ö†Ô∏è Navegador bloqueou, aplicando estrat√©gia segura:', error);

                try {
                    // Reset antes da segunda tentativa
                    video.pause();
                    video.currentTime = 0;

                    // ESTRAT√âGIA INTERMEDI√ÅRIA: For√ßa som ap√≥s pequeno delay
                    video.muted = false;
                    video.volume = 1.0;

                    await video.play();

                    // REFOR√áA √°udio ap√≥s 100ms
                    setTimeout(() => {
                        if (video && !video.paused) {
                            video.muted = false;
                            video.volume = 1.0;
                            setAudioEnabled(true);
                            console.log('üîä Som GARANTIDO ap√≥s reprodu√ß√£o!');
                        }
                    }, 100);

                } catch (secondError) {
                    console.log('‚ö†Ô∏è Usando fallback com intera√ß√£o:', secondError);

                    // FALLBACK SEGURO: Inicia muted, ativa na primeira intera√ß√£o
                    try {
                        video.pause();
                        video.currentTime = 0;
                        video.muted = true;

                        await video.play();

                        // ATIVA√á√ÉO na primeira intera√ß√£o
                        const instantActivation = () => {
                            if (video && !video.paused) {
                                video.muted = false;
                                video.volume = 1.0;
                                setAudioEnabled(true);
                                video.controls = false;
                                console.log('üîä √ÅUDIO ATIVADO na intera√ß√£o!');
                            }

                            // Remove listeners
                            ['click', 'touchstart', 'keydown', 'mousemove'].forEach(event => {
                                document.removeEventListener(event, instantActivation);
                            });
                        };

                        // Listeners para intera√ß√£o
                        ['click', 'touchstart', 'keydown', 'mousemove'].forEach(event => {
                            document.addEventListener(event, instantActivation, { once: true });
                        });

                    } catch (finalError) {
                        console.error('‚ùå Erro cr√≠tico na reprodu√ß√£o:', finalError);
                        setPlayAttempted(false); // Permite nova tentativa
                    }
                }
            }
        };

        playVideo();

        // Configura comportamento dos controles: APENAS no hover, SEMPRE escondidos por padr√£o
        const handleMouseEnter = () => {
            // S√≥ mostra controles se realmente precisar (√°udio desativado)
            if (video.muted) {
                video.controls = true;
            }
        };

        const handleMouseLeave = () => {
            // SEMPRE esconde controles quando o mouse sai
            video.controls = false;
        };

        // Monitora o progresso do v√≠deo para fade out e transi√ß√£o
        const handleTimeUpdate = () => {
            const currentTime = video.currentTime;
            const duration = video.duration;

            // FADE OUT do √°udio 3 segundos antes do fim (corte seco suave)
            if (duration - currentTime <= 3 && duration - currentTime > 2.5 && video.volume > 0) {
                // Fade out r√°pido em 0.5 segundos
                const fadeOutInterval = setInterval(() => {
                    if (video.volume > 0.1) {
                        video.volume = Math.max(0, video.volume - 0.1);
                    } else {
                        video.volume = 0;
                        clearInterval(fadeOutInterval);
                    }
                }, 50); // Fade out em 0.5s
            }

            // Inicia a transi√ß√£o 2.5 segundos antes do fim
            if (duration - currentTime <= 2.5 && !isTransitioning) {
                setIsTransitioning(true);
                startSeamlessTransition();
            }
        };

        // Fun√ß√£o que cria a transi√ß√£o impercept√≠vel
        const startSeamlessTransition = () => {
            // Fase 1: Overlay gradual que simula continuidade do v√≠deo
            setShowTransitionOverlay(true);

            // Fase 2: Ap√≥s 1.8s, inicia o fade para dashboard
            setTimeout(() => {
                container.classList.add('video-to-dashboard-transition');
            }, 1800);

            // Fase 3: Completa a transi√ß√£o ap√≥s 3.2s total
            setTimeout(() => {
                onComplete();
            }, 3200);
        };

        // Backup: se o v√≠deo terminar antes da transi√ß√£o programada
        const handleVideoEnd = () => {
            if (!isTransitioning) {
                setIsTransitioning(true);
                // Transi√ß√£o mais r√°pida se chegou ao final
                container.classList.add('video-to-dashboard-transition');
                setTimeout(() => onComplete(), 1200);
            }
        };

        // Evento OTIMIZADO quando v√≠deo est√° pronto
        const handleCanPlay = () => {
            if (playAttempted) return; // Evita m√∫ltiplas execu√ß√µes

            console.log('üìπ V√≠deo pronto - INICIANDO reprodu√ß√£o controlada!');

            // CONFIGURA √°udio ativo
            video.muted = false;
            video.volume = 1.0;
            video.controls = false;
            video.defaultMuted = false;
            setVideoLoaded(true);
            setAudioEnabled(true);

            // INICIA reprodu√ß√£o de forma controlada
            playVideo();
        };

        const handleLoadedData = () => {
            if (videoLoaded) return; // Evita execu√ß√£o duplicada

            console.log('üìä Dados carregados - PR√â-CONFIGURANDO √°udio!');

            // CONFIGURA√á√ïES INICIAIS
            video.muted = false;
            video.volume = 1.0;
            video.controls = false;
            video.defaultMuted = false;
            setVideoLoaded(true);
            setAudioEnabled(true);
        };

        const handleLoadedMetadata = () => {
            console.log('üìã Metadados carregados - PREPARANDO reprodu√ß√£o!');

            // PR√â-CONFIGURA √°udio desde os metadados
            video.muted = false;
            video.volume = 1.0;
            video.controls = false;
            video.defaultMuted = false;
            setAudioEnabled(true);
        };

        const handleError = (e: Event) => {
            console.error('‚ùå Erro no v√≠deo:', e);
            video.controls = true;
        };

        // Adiciona eventos do v√≠deo (ordem otimizada para √°udio ativo)
        video.addEventListener('loadedmetadata', handleLoadedMetadata);
        video.addEventListener('loadeddata', handleLoadedData);
        video.addEventListener('canplay', handleCanPlay);
        video.addEventListener('error', handleError);
        video.addEventListener('timeupdate', handleTimeUpdate);
        video.addEventListener('ended', handleVideoEnd);
        video.addEventListener('mouseenter', handleMouseEnter);
        video.addEventListener('mouseleave', handleMouseLeave);

        // Tenta reproduzir apenas uma vez quando estiver realmente pronto
        if (video.readyState >= 3 && !playAttempted) { // HAVE_FUTURE_DATA
            console.log('üöÄ V√≠deo j√° carregado, iniciando reprodu√ß√£o √∫nica');
            setTimeout(() => playVideo(), 100); // Pequeno delay para evitar conflitos
        }

        // Cleanup otimizado
        return () => {
            video.removeEventListener('loadedmetadata', handleLoadedMetadata);
            video.removeEventListener('loadeddata', handleLoadedData);
            video.removeEventListener('canplay', handleCanPlay);
            video.removeEventListener('error', handleError);
            video.removeEventListener('timeupdate', handleTimeUpdate);
            video.removeEventListener('ended', handleVideoEnd);
            video.removeEventListener('mouseenter', handleMouseEnter);
            video.removeEventListener('mouseleave', handleMouseLeave);
        };
    }, [onComplete, isTransitioning, playAttempted, videoLoaded]);

    return (
        <div ref={containerRef} className="video-intro-container">
            {/* Loading indicator quando v√≠deo n√£o carregou */}
            {!videoLoaded && (
                <div className="video-loading">
                    <div className="loading-spinner"></div>
                    <p>Carregando v√≠deo...</p>
                </div>
            )}

            <video
                ref={videoRef}
                className="intro-video"
                autoPlay
                playsInline
                preload="auto"
                loop={false}
                muted={false}
                style={{ opacity: videoLoaded ? 1 : 0 }}
            >
                <source
                    src="/videoforIntro/watermarked-dbfcf2d4-29b6-415e-8070-d669de5a0283.mp4"
                    type="video/mp4"
                />
                Seu navegador n√£o suporta a reprodu√ß√£o de v√≠deo.
            </video>

            {/* Overlay de transi√ß√£o impercept√≠vel */}
            {showTransitionOverlay && (
                <div className="seamless-transition-overlay">
                    <div className="transition-gradient"></div>
                    <div className="transition-particles"></div>
                    <div className="transition-glow"></div>
                </div>
            )}

            {/* Indicador discreto de √°udio */}
            {audioEnabled && (
                <div className="audio-indicator">
                    <div className="audio-wave"></div>
                    <div className="audio-wave"></div>
                    <div className="audio-wave"></div>
                </div>
            )}
        </div>
    );
};

export default VideoIntro;

### Java Login System - User Management API Tests
### Base URL: http://localhost:8080/api/v1

@baseUrl = http://localhost:8080/api/v1
@contentType = application/json
@authToken = your-jwt-token-here
@adminToken = admin-jwt-token-here

###########################################################################
# üë• USER MANAGEMENT TESTS
###########################################################################

### 1. üìä Get All Users - Admin Access
GET {{baseUrl}}/users?page=0&size=10
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 2. üìä Get All Users - Pagination Test
GET {{baseUrl}}/users?page=1&size=5&sortBy=username&sortDirection=ASC
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 3. üìä Get All Users - Large Page Size
GET {{baseUrl}}/users?page=0&size=100
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 4. ‚ùå Get All Users - Non-Admin Access (Should Fail)
GET {{baseUrl}}/users
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### 5. ‚ùå Get All Users - No Authorization
GET {{baseUrl}}/users
Accept: {{contentType}}

###########################################################################
# üîç USER SEARCH TESTS
###########################################################################

### 6. üîç Search Users by Role - Admin
GET {{baseUrl}}/users/search?role=ADMIN
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 7. üîç Search Users by Role - User
GET {{baseUrl}}/users/search?role=USER
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 8. üîç Search Users by Role - Moderator
GET {{baseUrl}}/users/search?role=MODERATOR
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 9. üîç Search Users by Status - Active
GET {{baseUrl}}/users/search?active=true
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 10. üîç Search Users by Status - Inactive
GET {{baseUrl}}/users/search?active=false
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 11. üîç Search Users by Username Pattern
GET {{baseUrl}}/users/search?username=admin
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 12. üîç Search Users by Email Pattern  
GET {{baseUrl}}/users/search?email=@system.com
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 13. üîç Complex Search - Multiple Criteria
GET {{baseUrl}}/users/search?role=USER&active=true&page=0&size=5
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 14. ‚ùå Search Users - Invalid Role
GET {{baseUrl}}/users/search?role=INVALID_ROLE
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

###########################################################################
# üë§ INDIVIDUAL USER OPERATIONS
###########################################################################

### 15. üë§ Get User by ID - Valid User
GET {{baseUrl}}/users/1
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 16. üë§ Get Current User Profile
GET {{baseUrl}}/users/me
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

### 17. ‚ùå Get User by ID - Non-existent User
GET {{baseUrl}}/users/99999
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 18. ‚ùå Get User by ID - Invalid ID Format
GET {{baseUrl}}/users/invalid-id
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 19. ‚ùå Get User by ID - No Authorization
GET {{baseUrl}}/users/1
Accept: {{contentType}}

###########################################################################
# ‚úèÔ∏è USER CREATION TESTS
###########################################################################

### 20. ‚úÖ Create New User - Valid Data (Admin)
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "username": "newuser_{{$timestamp}}",
  "password": "newuser123",
  "email": "newuser_{{$timestamp}}@example.com",
  "firstName": "New",
  "lastName": "TestUser",
  "role": "USER",
  "active": true
}

### 21. ‚úÖ Create New Moderator - Valid Data (Admin)
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "username": "moderator_{{$timestamp}}",
  "password": "moderator123",
  "email": "moderator_{{$timestamp}}@example.com",
  "firstName": "Test",
  "lastName": "Moderator",
  "role": "MODERATOR",
  "active": true
}

### 22. ‚ùå Create User - Duplicate Username
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "username": "admin",
  "password": "duplicate123",
  "email": "duplicate@example.com",
  "firstName": "Duplicate",
  "lastName": "User",
  "role": "USER"
}

### 23. ‚ùå Create User - Invalid Email Format
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "username": "invalidemail",
  "password": "valid123",
  "email": "invalid-email-format",
  "firstName": "Invalid",
  "lastName": "Email",
  "role": "USER"
}

### 24. ‚ùå Create User - Weak Password
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "username": "weakpass",
  "password": "123",
  "email": "weak@example.com",
  "firstName": "Weak",
  "lastName": "Password",
  "role": "USER"
}

### 25. ‚ùå Create User - Missing Required Fields
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "username": "incomplete",
  "email": "incomplete@example.com"
}

### 26. ‚ùå Create User - Invalid Role
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "username": "invalidrole",
  "password": "valid123",
  "email": "valid@example.com",
  "firstName": "Invalid",
  "lastName": "Role",
  "role": "INVALID_ROLE"
}

### 27. ‚ùå Create User - Non-Admin Access (Should Fail)
POST {{baseUrl}}/users
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "username": "unauthorized",
  "password": "valid123",
  "email": "unauth@example.com",
  "firstName": "Unauthorized",
  "lastName": "Creation",
  "role": "USER"
}

###########################################################################
# ‚úèÔ∏è USER UPDATE TESTS
###########################################################################

### 28. ‚úÖ Update User Profile - Valid Data
PUT {{baseUrl}}/users/1
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "firstName": "Updated",
  "lastName": "Administrator",
  "email": "updated_admin@system.com",
  "phoneNumber": "+1-555-0123",
  "active": true
}

### 29. ‚úÖ Update User - Change Role (Admin Only)
PUT {{baseUrl}}/users/2
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "role": "MODERATOR",
  "active": true
}

### 30. ‚úÖ Update Current User Profile (Self)
PUT {{baseUrl}}/users/me
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "firstName": "Self",
  "lastName": "Updated",
  "email": "self_updated@example.com",
  "phoneNumber": "+1-555-9999"
}

### 31. ‚ùå Update User - Invalid Email Format
PUT {{baseUrl}}/users/1
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "firstName": "Valid",
  "lastName": "Name",
  "email": "invalid-email-format"
}

### 32. ‚ùå Update User - Non-existent User
PUT {{baseUrl}}/users/99999
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "firstName": "Non",
  "lastName": "Existent"
}

### 33. ‚ùå Update User - Insufficient Permissions
PUT {{baseUrl}}/users/1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "firstName": "Unauthorized",
  "lastName": "Update",
  "role": "ADMIN"
}

### 34. ‚ùå Update User - Invalid Role Change
PUT {{baseUrl}}/users/1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "role": "INVALID_ROLE"
}

###########################################################################
# üîÑ USER STATUS MANAGEMENT
###########################################################################

### 35. ‚úÖ Activate User Account
PUT {{baseUrl}}/users/2/activate
Authorization: Bearer {{adminToken}}

### 36. ‚úÖ Deactivate User Account
PUT {{baseUrl}}/users/2/deactivate
Authorization: Bearer {{adminToken}}

### 37. ‚ùå Activate Non-existent User
PUT {{baseUrl}}/users/99999/activate
Authorization: Bearer {{adminToken}}

### 38. ‚ùå Deactivate Own Account (Should Fail)
PUT {{baseUrl}}/users/1/deactivate
Authorization: Bearer {{adminToken}}

### 39. ‚ùå Activate User - Insufficient Permissions
PUT {{baseUrl}}/users/2/activate
Authorization: Bearer {{authToken}}

###########################################################################
# üóëÔ∏è USER DELETION TESTS
###########################################################################

### 40. ‚úÖ Delete User - Valid Request
DELETE {{baseUrl}}/users/3
Authorization: Bearer {{adminToken}}

### 41. ‚ùå Delete Non-existent User
DELETE {{baseUrl}}/users/99999
Authorization: Bearer {{adminToken}}

### 42. ‚ùå Delete Own Account (Should Fail)
DELETE {{baseUrl}}/users/1
Authorization: Bearer {{adminToken}}

### 43. ‚ùå Delete User - Insufficient Permissions
DELETE {{baseUrl}}/users/2
Authorization: Bearer {{authToken}}

### 44. ‚ùå Delete User - No Authorization
DELETE {{baseUrl}}/users/2

###########################################################################
# üìä USER STATISTICS AND ANALYTICS
###########################################################################

### 45. üìà Get User Statistics - Admin View
GET {{baseUrl}}/users/stats
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 46. üìä Get User Activity Summary
GET {{baseUrl}}/users/activity
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 47. üîç Get Recent User Registrations
GET {{baseUrl}}/users/recent?days=7
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 48. ‚ùå Get User Statistics - Non-Admin Access
GET {{baseUrl}}/users/stats
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

###########################################################################
# üîê PERMISSION AND ROLE TESTS
###########################################################################

### 49. ‚úÖ Get User Permissions
GET {{baseUrl}}/users/1/permissions
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 50. üîç Check Specific Permission
GET {{baseUrl}}/users/1/permissions/USER_MANAGEMENT
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 51. üìã Get Available Roles
GET {{baseUrl}}/users/roles
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 52. ‚ùå Get Permissions - Insufficient Access
GET {{baseUrl}}/users/1/permissions
Authorization: Bearer {{authToken}}
Accept: {{contentType}}

###########################################################################
# üîç ADVANCED SEARCH AND FILTERING
###########################################################################

### 53. üîç Search Users with Date Range
GET {{baseUrl}}/users/search?createdAfter=2025-01-01&createdBefore=2025-12-31
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 54. üîç Search Users by Multiple Roles
GET {{baseUrl}}/users/search?roles=ADMIN,MODERATOR
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 55. üîç Search Users with Full Text Search
GET {{baseUrl}}/users/search?query=admin
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

### 56. üìä Advanced User Analytics
GET {{baseUrl}}/users/analytics?groupBy=role&period=month
Authorization: Bearer {{adminToken}}
Accept: {{contentType}}

###########################################################################
# üîÑ BULK OPERATIONS
###########################################################################

### 57. ‚úÖ Bulk Update Users
PUT {{baseUrl}}/users/bulk
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "userIds": [2, 3],
  "updates": {
    "active": true
  }
}

### 58. ‚úÖ Bulk Delete Users
DELETE {{baseUrl}}/users/bulk
Content-Type: {{contentType}}
Authorization: Bearer {{adminToken}}

{
  "userIds": [4, 5],
  "confirm": true
}

### 59. ‚ùå Bulk Operations - Insufficient Permissions
PUT {{baseUrl}}/users/bulk
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}

{
  "userIds": [2],
  "updates": {
    "active": false
  }
}

###########################################################################
# üìù TEST EXECUTION NOTES
###########################################################################

# To run these tests:
# 1. Update @authToken and @adminToken variables with actual JWT tokens
# 2. Ensure your Java application is running on localhost:8080
# 3. Run tests sequentially for dependencies (create before update/delete)
# 4. Monitor logs for security events and permissions validation
# 5. Verify audit trail for all administrative operations

# Expected Test Results:
# ‚úÖ = Should succeed (200, 201, 204 status codes)
# ‚ùå = Should fail (400, 401, 403, 404 status codes)
# üîç = Data retrieval operation
# ‚úèÔ∏è = Data modification operation
# üóëÔ∏è = Data deletion operation
